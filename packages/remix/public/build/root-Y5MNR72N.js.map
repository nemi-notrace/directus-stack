{
  "version": 3,
  "sources": ["empty-module:./utils/theme.server", "../../app/root.tsx"],
  "sourcesContent": ["module.exports = {};", "import type { LinksFunction, LoaderArgs, MetaFunction } from '@remix-run/node'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData,\n} from '@remix-run/react'\nimport tailwindStyles from './styles/app.css'\nimport {\n  Theme,\n  ThemeBody,\n  ThemeHead,\n  ThemeProvider,\n  useTheme,\n} from './utils/theme-provider'\nimport { getThemeSession } from './utils/theme.server'\n\nexport const links: LinksFunction = () => [\n  { rel: 'preconnect', href: '//fonts.gstatic.com', crossOrigin: 'anonymous' },\n  { rel: 'stylesheet', href: tailwindStyles },\n  {\n    rel: 'stylesheet',\n    href: '//fonts.googleapis.com/css?family=Work+Sans:300,400,600,700&amp;lang=en',\n  },\n]\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'New Remix App',\n  viewport: 'width=device-width,initial-scale=1',\n})\n\nexport type LoaderData = {\n  theme: Theme | null\n}\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  const themeSession = await getThemeSession(request)\n\n  const data: LoaderData = {\n    theme: themeSession.getTheme(),\n  }\n\n  return data\n}\nexport type Loader = typeof loader\n\nexport function App() {\n  const data = useLoaderData<typeof loader>()\n  const [theme] = useTheme()\n\n  return (\n    <html lang=\"en\" className={theme ?? ''}>\n      <head>\n        <Meta />\n        <Links />\n        <ThemeHead ssrTheme={Boolean(data.theme)} />\n      </head>\n      <body>\n        <Outlet />\n        <ThemeBody ssrTheme={Boolean(data.theme)} />\n\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  )\n}\n\nexport default function AppWithProviders() {\n  const data = useLoaderData<LoaderData>()\n\n  return (\n    <ThemeProvider specifiedTheme={data.theme}>\n      <App />\n    </ThemeProvider>\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;;;;ACkBlB,mBAAgC;AAlBhC;AAoBO,IAAM,QAAuB,MAAM;AAAA,EACxC,EAAE,KAAK,cAAc,MAAM,uBAAuB,aAAa,YAAY;AAAA,EAC3E,EAAE,KAAK,cAAc,MAAM,YAAe;AAAA,EAC1C;AAAA,IACE,KAAK;AAAA,IACL,MAAM;AAAA,EACR;AACF;AAEO,IAAM,OAAqB,OAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AACZ;AAiBO,SAAS,MAAM;AACpB,QAAM,OAAO,cAA6B;AAC1C,QAAM,CAAC,KAAK,IAAI,SAAS;AAEzB,SACE,mDAAC;AAAA,IAAK,MAAK;AAAA,IAAK,WAAW,wBAAS;AAAA,IAClC;AAAA,yDAAC;AAAA,QACC;AAAA,6DAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAM;AAAA,UACN,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,iBAAO;AAAA,UACP,mDAAC;AAAA,YAAU,UAAU,QAAQ,KAAK,KAAK;AAAA,aAAvC;AAAA;AAAA;AAAA;AAAA,iBAA0C;AAAA;AAAA,SAH5C;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC;AAAA,QACC;AAAA,6DAAC,YAAD;AAAA;AAAA;AAAA;AAAA,iBAAQ;AAAA,UACR,mDAAC;AAAA,YAAU,UAAU,QAAQ,KAAK,KAAK;AAAA,aAAvC;AAAA;AAAA;AAAA;AAAA,iBAA0C;AAAA,UAE1C,mDAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,iBAAmB;AAAA,UACnB,mDAAC,aAAD;AAAA;AAAA;AAAA;AAAA,iBAAS;AAAA,UACT,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,iBAAY;AAAA;AAAA,SANd;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA;AAAA,KAbF;AAAA;AAAA;AAAA;AAAA,SAcA;AAEJ;AAEe,SAAR,mBAAoC;AACzC,QAAM,OAAO,cAA0B;AAEvC,SACE,mDAAC;AAAA,IAAc,gBAAgB,KAAK;AAAA,IAClC,6DAAC,SAAD;AAAA;AAAA;AAAA;AAAA,WAAK;AAAA,KADP;AAAA;AAAA;AAAA;AAAA,SAEA;AAEJ;",
  "names": []
}
